// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.read.swsh.flatbuffers.Gfbmdl;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MatSwitch extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MatSwitch getRootAsMatSwitch(ByteBuffer _bb) { return getRootAsMatSwitch(_bb, new MatSwitch()); }
  public static MatSwitch getRootAsMatSwitch(ByteBuffer _bb, MatSwitch obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatSwitch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean value() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createMatSwitch(FlatBufferBuilder builder,
      int nameOffset,
      boolean value) {
    builder.startTable(2);
    MatSwitch.addName(builder, nameOffset);
    MatSwitch.addValue(builder, value);
    return MatSwitch.endMatSwitch(builder);
  }

  public static void startMatSwitch(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addValue(FlatBufferBuilder builder, boolean value) { builder.addBoolean(1, value, false); }
  public static int endMatSwitch(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatSwitch get(int j) { return get(new MatSwitch(), j); }
    public MatSwitch get(MatSwitch obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

