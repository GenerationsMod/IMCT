// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.read.la.flatbuffers.Hayabusa.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SubMesh extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SubMesh getRootAsSubMesh(ByteBuffer _bb) { return getRootAsSubMesh(_bb, new SubMesh()); }
  public static SubMesh getRootAsSubMesh(ByteBuffer _bb, SubMesh obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SubMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long indexCount() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long indexOffset() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long unk3() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String material() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer materialInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public int unk4() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : -1; }

  public static int createSubMesh(FlatBufferBuilder builder,
      long indexCount,
      long indexOffset,
      long unk3,
      int materialOffset,
      int unk4) {
    builder.startTable(5);
    SubMesh.addUnk4(builder, unk4);
    SubMesh.addMaterial(builder, materialOffset);
    SubMesh.addUnk3(builder, unk3);
    SubMesh.addIndexOffset(builder, indexOffset);
    SubMesh.addIndexCount(builder, indexCount);
    return SubMesh.endSubMesh(builder);
  }

  public static void startSubMesh(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addIndexCount(FlatBufferBuilder builder, long indexCount) { builder.addInt(0, (int) indexCount, (int) 0L); }
  public static void addIndexOffset(FlatBufferBuilder builder, long indexOffset) { builder.addInt(1, (int) indexOffset, (int) 0L); }
  public static void addUnk3(FlatBufferBuilder builder, long unk3) { builder.addInt(2, (int) unk3, (int) 0L); }
  public static void addMaterial(FlatBufferBuilder builder, int materialOffset) { builder.addOffset(3, materialOffset, 0); }
  public static void addUnk4(FlatBufferBuilder builder, int unk4) { builder.addInt(4, unk4, -1); }
  public static int endSubMesh(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SubMesh get(int j) { return get(new SubMesh(), j); }
    public SubMesh get(SubMesh obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

