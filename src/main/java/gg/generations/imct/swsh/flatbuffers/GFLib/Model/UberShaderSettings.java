// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.swsh.flatbuffers.GFLib.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class UberShaderSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static UberShaderSettings getRootAsUberShaderSettings(ByteBuffer _bb) { return getRootAsUberShaderSettings(_bb, new UberShaderSettings()); }
  public static UberShaderSettings getRootAsUberShaderSettings(ByteBuffer _bb, UberShaderSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UberShaderSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag uberFlags(int j) { return uberFlags(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag uberFlags(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int uberFlagsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector uberFlagsVector() { return uberFlagsVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector uberFlagsVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value uberValue(int j) { return uberValue(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value uberValue(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int uberValueLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector uberValueVector() { return uberValueVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector uberValueVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color uberColor(int j) { return uberColor(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color uberColor(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int uberColorLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector uberColorVector() { return uberColorVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector uberColorVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createUberShaderSettings(FlatBufferBuilder builder,
      int uberFlagsOffset,
      int uberValueOffset,
      int uberColorOffset) {
    builder.startTable(3);
    UberShaderSettings.addUberColor(builder, uberColorOffset);
    UberShaderSettings.addUberValue(builder, uberValueOffset);
    UberShaderSettings.addUberFlags(builder, uberFlagsOffset);
    return UberShaderSettings.endUberShaderSettings(builder);
  }

  public static void startUberShaderSettings(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addUberFlags(FlatBufferBuilder builder, int uberFlagsOffset) { builder.addOffset(0, uberFlagsOffset, 0); }
  public static int createUberFlagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUberFlagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUberValue(FlatBufferBuilder builder, int uberValueOffset) { builder.addOffset(1, uberValueOffset, 0); }
  public static int createUberValueVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUberValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUberColor(FlatBufferBuilder builder, int uberColorOffset) { builder.addOffset(2, uberColorOffset, 0); }
  public static int createUberColorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUberColorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUberShaderSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UberShaderSettings get(int j) { return get(new UberShaderSettings(), j); }
    public UberShaderSettings get(UberShaderSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

