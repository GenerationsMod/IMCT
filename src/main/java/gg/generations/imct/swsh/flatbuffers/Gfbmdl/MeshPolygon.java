// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.swsh.flatbuffers.Gfbmdl;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MeshPolygon extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MeshPolygon getRootAsMeshPolygon(ByteBuffer _bb) { return getRootAsMeshPolygon(_bb, new MeshPolygon()); }
  public static MeshPolygon getRootAsMeshPolygon(ByteBuffer _bb, MeshPolygon obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MeshPolygon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long materialIndex() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int faces(int j) { int o = __offset(6); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int facesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector facesVector() { return facesVector(new ShortVector()); }
  public ShortVector facesVector(ShortVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer facesAsByteBuffer() { return __vector_as_bytebuffer(6, 2); }
  public ByteBuffer facesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 2); }

  public static int createMeshPolygon(FlatBufferBuilder builder,
      long materialIndex,
      int facesOffset) {
    builder.startTable(2);
    MeshPolygon.addFaces(builder, facesOffset);
    MeshPolygon.addMaterialIndex(builder, materialIndex);
    return MeshPolygon.endMeshPolygon(builder);
  }

  public static void startMeshPolygon(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMaterialIndex(FlatBufferBuilder builder, long materialIndex) { builder.addInt(0, (int) materialIndex, (int) 0L); }
  public static void addFaces(FlatBufferBuilder builder, int facesOffset) { builder.addOffset(1, facesOffset, 0); }
  public static int createFacesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort((short) data[i]); return builder.endVector(); }
  public static void startFacesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static int endMeshPolygon(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MeshPolygon get(int j) { return get(new MeshPolygon(), j); }
    public MeshPolygon get(MeshPolygon obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

