// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.read.la.flatbuffers.Hayabusa.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class WriteMask extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static WriteMask getRootAsWriteMask(ByteBuffer _bb) { return getRootAsWriteMask(_bb, new WriteMask()); }
  public static WriteMask getRootAsWriteMask(ByteBuffer _bb, WriteMask obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WriteMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int mask() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 255; }

  public static int createWriteMask(FlatBufferBuilder builder,
      int mask) {
    builder.startTable(1);
    WriteMask.addMask(builder, mask);
    return WriteMask.endWriteMask(builder);
  }

  public static void startWriteMask(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addMask(FlatBufferBuilder builder, int mask) { builder.addByte(0, (byte) mask, (byte) 255); }
  public static int endWriteMask(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WriteMask get(int j) { return get(new WriteMask(), j); }
    public WriteMask get(WriteMask obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

