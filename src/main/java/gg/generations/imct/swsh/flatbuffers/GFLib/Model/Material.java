// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.swsh.flatbuffers.GFLib.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Material extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Material getRootAsMaterial(ByteBuffer _bb) { return getRootAsMaterial(_bb, new Material()); }
  public static Material getRootAsMaterial(ByteBuffer _bb, Material obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String shader() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shaderAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer shaderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long sortPriority() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int depthWrite() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int depthTest() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long lightSetNum() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long blendMode() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long cullMode() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long vertexShaderFileId() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long geomShaderFileId() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long fragShaderFileId() { int o = __offset(24); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture textures(int j) { return textures(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture textures(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture obj, int j) { int o = __offset(26); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int texturesLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture.Vector texturesVector() { return texturesVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture.Vector texturesVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Texture.Vector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag flags(int j) { return flags(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag flags(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag obj, int j) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int flagsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector flagsVector() { return flagsVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector flagsVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Flag.Vector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value values(int j) { return values(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value values(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector valuesVector() { return valuesVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector valuesVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Value.Vector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color colors(int j) { return colors(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color(), j); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color colors(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color obj, int j) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int colorsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector colorsVector() { return colorsVector(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector colorsVector(gg.generations.imct.swsh.flatbuffers.GFLib.Model.Color.Vector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int recieveShadow() { int o = __offset(34); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int castShadow() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int selfShadow() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int textureAlphaTest() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long depthComparisonFunction() { int o = __offset(42); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.UberShaderSettings staticParam() { return staticParam(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.UberShaderSettings()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.UberShaderSettings staticParam(gg.generations.imct.swsh.flatbuffers.GFLib.Model.UberShaderSettings obj) { int o = __offset(44); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int depthBias() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float f18() { int o = __offset(48); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float f19() { int o = __offset(50); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createMaterial(FlatBufferBuilder builder,
      int nameOffset,
      int shaderOffset,
      long sortPriority,
      int depthWrite,
      int depthTest,
      long lightSetNum,
      long blendMode,
      long cullMode,
      long vertexShaderFileId,
      long geomShaderFileId,
      long fragShaderFileId,
      int texturesOffset,
      int flagsOffset,
      int valuesOffset,
      int colorsOffset,
      int recieveShadow,
      int castShadow,
      int selfShadow,
      int textureAlphaTest,
      long depthComparisonFunction,
      int staticParamOffset,
      int depthBias,
      float f18,
      float f19) {
    builder.startTable(24);
    Material.addF19(builder, f19);
    Material.addF18(builder, f18);
    Material.addDepthBias(builder, depthBias);
    Material.addStaticParam(builder, staticParamOffset);
    Material.addDepthComparisonFunction(builder, depthComparisonFunction);
    Material.addColors(builder, colorsOffset);
    Material.addValues(builder, valuesOffset);
    Material.addFlags(builder, flagsOffset);
    Material.addTextures(builder, texturesOffset);
    Material.addFragShaderFileId(builder, fragShaderFileId);
    Material.addGeomShaderFileId(builder, geomShaderFileId);
    Material.addVertexShaderFileId(builder, vertexShaderFileId);
    Material.addCullMode(builder, cullMode);
    Material.addBlendMode(builder, blendMode);
    Material.addLightSetNum(builder, lightSetNum);
    Material.addSortPriority(builder, sortPriority);
    Material.addShader(builder, shaderOffset);
    Material.addName(builder, nameOffset);
    Material.addTextureAlphaTest(builder, textureAlphaTest);
    Material.addSelfShadow(builder, selfShadow);
    Material.addCastShadow(builder, castShadow);
    Material.addRecieveShadow(builder, recieveShadow);
    Material.addDepthTest(builder, depthTest);
    Material.addDepthWrite(builder, depthWrite);
    return Material.endMaterial(builder);
  }

  public static void startMaterial(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addShader(FlatBufferBuilder builder, int shaderOffset) { builder.addOffset(1, shaderOffset, 0); }
  public static void addSortPriority(FlatBufferBuilder builder, long sortPriority) { builder.addInt(2, (int) sortPriority, (int) 0L); }
  public static void addDepthWrite(FlatBufferBuilder builder, int depthWrite) { builder.addByte(3, (byte) depthWrite, (byte) 0); }
  public static void addDepthTest(FlatBufferBuilder builder, int depthTest) { builder.addByte(4, (byte) depthTest, (byte) 0); }
  public static void addLightSetNum(FlatBufferBuilder builder, long lightSetNum) { builder.addInt(5, (int) lightSetNum, (int) 0L); }
  public static void addBlendMode(FlatBufferBuilder builder, long blendMode) { builder.addInt(6, (int) blendMode, (int) 0L); }
  public static void addCullMode(FlatBufferBuilder builder, long cullMode) { builder.addInt(7, (int) cullMode, (int) 0L); }
  public static void addVertexShaderFileId(FlatBufferBuilder builder, long vertexShaderFileId) { builder.addInt(8, (int) vertexShaderFileId, (int) 0L); }
  public static void addGeomShaderFileId(FlatBufferBuilder builder, long geomShaderFileId) { builder.addInt(9, (int) geomShaderFileId, (int) 0L); }
  public static void addFragShaderFileId(FlatBufferBuilder builder, long fragShaderFileId) { builder.addInt(10, (int) fragShaderFileId, (int) 0L); }
  public static void addTextures(FlatBufferBuilder builder, int texturesOffset) { builder.addOffset(11, texturesOffset, 0); }
  public static int createTexturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTexturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlags(FlatBufferBuilder builder, int flagsOffset) { builder.addOffset(12, flagsOffset, 0); }
  public static int createFlagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(13, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addColors(FlatBufferBuilder builder, int colorsOffset) { builder.addOffset(14, colorsOffset, 0); }
  public static int createColorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRecieveShadow(FlatBufferBuilder builder, int recieveShadow) { builder.addByte(15, (byte) recieveShadow, (byte) 0); }
  public static void addCastShadow(FlatBufferBuilder builder, int castShadow) { builder.addByte(16, (byte) castShadow, (byte) 0); }
  public static void addSelfShadow(FlatBufferBuilder builder, int selfShadow) { builder.addByte(17, (byte) selfShadow, (byte) 0); }
  public static void addTextureAlphaTest(FlatBufferBuilder builder, int textureAlphaTest) { builder.addByte(18, (byte) textureAlphaTest, (byte) 0); }
  public static void addDepthComparisonFunction(FlatBufferBuilder builder, long depthComparisonFunction) { builder.addInt(19, (int) depthComparisonFunction, (int) 0L); }
  public static void addStaticParam(FlatBufferBuilder builder, int staticParamOffset) { builder.addOffset(20, staticParamOffset, 0); }
  public static void addDepthBias(FlatBufferBuilder builder, int depthBias) { builder.addInt(21, depthBias, 0); }
  public static void addF18(FlatBufferBuilder builder, float f18) { builder.addFloat(22, f18, 0.0f); }
  public static void addF19(FlatBufferBuilder builder, float f19) { builder.addFloat(23, f19, 0.0f); }
  public static int endMaterial(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Material get(int j) { return get(new Material(), j); }
    public Material get(Material obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

