// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.scvi.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRBSM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TRBSM getRootAsTRBSM(ByteBuffer _bb) { return getRootAsTRBSM(_bb, new TRBSM()); }
  public static TRBSM getRootAsTRBSM(ByteBuffer _bb, TRBSM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRBSM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry bones(int j) { return bones(new gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry(), j); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry bones(gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bonesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry.Vector bonesVector() { return bonesVector(new gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry.Vector()); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry.Vector bonesVector(gg.generations.imct.scvi.flatbuffers.Titan.Model.BoneEntry.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry scalers(int j) { return scalers(new gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry(), j); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry scalers(gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int scalersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry.Vector scalersVector() { return scalersVector(new gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry.Vector()); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry.Vector scalersVector(gg.generations.imct.scvi.flatbuffers.Titan.Model.ScalerEntry.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry mesh(int j) { return mesh(new gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry(), j); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry mesh(gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int meshLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry.Vector meshVector() { return meshVector(new gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry.Vector()); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry.Vector meshVector(gg.generations.imct.scvi.flatbuffers.Titan.Model.MeshEntry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.UnkEntry unk() { return unk(new gg.generations.imct.scvi.flatbuffers.Titan.Model.UnkEntry()); }
  public gg.generations.imct.scvi.flatbuffers.Titan.Model.UnkEntry unk(gg.generations.imct.scvi.flatbuffers.Titan.Model.UnkEntry obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTRBSM(FlatBufferBuilder builder,
      int bonesOffset,
      int scalersOffset,
      int meshOffset,
      int unkOffset) {
    builder.startTable(4);
    TRBSM.addUnk(builder, unkOffset);
    TRBSM.addMesh(builder, meshOffset);
    TRBSM.addScalers(builder, scalersOffset);
    TRBSM.addBones(builder, bonesOffset);
    return TRBSM.endTRBSM(builder);
  }

  public static void startTRBSM(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBones(FlatBufferBuilder builder, int bonesOffset) { builder.addOffset(0, bonesOffset, 0); }
  public static int createBonesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBonesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addScalers(FlatBufferBuilder builder, int scalersOffset) { builder.addOffset(1, scalersOffset, 0); }
  public static int createScalersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startScalersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMesh(FlatBufferBuilder builder, int meshOffset) { builder.addOffset(2, meshOffset, 0); }
  public static int createMeshVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMeshVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk(FlatBufferBuilder builder, int unkOffset) { builder.addOffset(3, unkOffset, 0); }
  public static int endTRBSM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRBSMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRBSMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRBSM get(int j) { return get(new TRBSM(), j); }
    public TRBSM get(TRBSM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

