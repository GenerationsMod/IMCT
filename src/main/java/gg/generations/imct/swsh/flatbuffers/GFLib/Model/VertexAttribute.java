// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.swsh.flatbuffers.GFLib.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class VertexAttribute extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static VertexAttribute getRootAsVertexAttribute(ByteBuffer _bb) { return getRootAsVertexAttribute(_bb, new VertexAttribute()); }
  public static VertexAttribute getRootAsVertexAttribute(ByteBuffer _bb, VertexAttribute obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VertexAttribute __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int format() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long count() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createVertexAttribute(FlatBufferBuilder builder,
      int type,
      int format,
      long count) {
    builder.startTable(3);
    VertexAttribute.addCount(builder, count);
    VertexAttribute.addFormat(builder, format);
    VertexAttribute.addType(builder, type);
    return VertexAttribute.endVertexAttribute(builder);
  }

  public static void startVertexAttribute(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(0, (byte) type, (byte) 0); }
  public static void addFormat(FlatBufferBuilder builder, int format) { builder.addByte(1, (byte) format, (byte) 0); }
  public static void addCount(FlatBufferBuilder builder, long count) { builder.addInt(2, (int) count, (int) 0L); }
  public static int endVertexAttribute(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VertexAttribute get(int j) { return get(new VertexAttribute(), j); }
    public VertexAttribute get(VertexAttribute obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

