// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.swsh.flatbuffers.GFLib.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Color extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Color getRootAsColor(ByteBuffer _bb) { return getRootAsColor(_bb, new Color()); }
  public static Color getRootAsColor(ByteBuffer _bb, Color obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String colorName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer colorNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer colorNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.RGB color() { return color(new gg.generations.imct.swsh.flatbuffers.GFLib.Model.RGB()); }
  public gg.generations.imct.swsh.flatbuffers.GFLib.Model.RGB color(gg.generations.imct.swsh.flatbuffers.GFLib.Model.RGB obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startColor(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addColorName(FlatBufferBuilder builder, int colorNameOffset) { builder.addOffset(0, colorNameOffset, 0); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addStruct(1, colorOffset, 0); }
  public static int endColor(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Color get(int j) { return get(new Color(), j); }
    public Color get(Color obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

