// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.imct.la.flatbuffers.Hayabusa.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRPOKECFG extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static TRPOKECFG getRootAsTRPOKECFG(ByteBuffer _bb) { return getRootAsTRPOKECFG(_bb, new TRPOKECFG()); }
  public static TRPOKECFG getRootAsTRPOKECFG(ByteBuffer _bb, TRPOKECFG obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRPOKECFG __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte sizeIndex() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public float unk1() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk2() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk3() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float inframeVerticalRotYOrigin() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float inframeBottomYOffset() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float inframeCenterYOffset() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float inframeLeftRotation() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float inframeRightRotation() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk9() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk10YOffset() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk11YOffset() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk12YOffset() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createTRPOKECFG(FlatBufferBuilder builder,
      byte sizeIndex,
      float unk1,
      float unk2,
      float unk3,
      float inframeVerticalRotYOrigin,
      float inframeBottomYOffset,
      float inframeCenterYOffset,
      float inframeLeftRotation,
      float inframeRightRotation,
      float unk9,
      float unk10YOffset,
      float unk11YOffset,
      float unk12YOffset) {
    builder.startTable(13);
    TRPOKECFG.addUnk12YOffset(builder, unk12YOffset);
    TRPOKECFG.addUnk11YOffset(builder, unk11YOffset);
    TRPOKECFG.addUnk10YOffset(builder, unk10YOffset);
    TRPOKECFG.addUnk9(builder, unk9);
    TRPOKECFG.addInframeRightRotation(builder, inframeRightRotation);
    TRPOKECFG.addInframeLeftRotation(builder, inframeLeftRotation);
    TRPOKECFG.addInframeCenterYOffset(builder, inframeCenterYOffset);
    TRPOKECFG.addInframeBottomYOffset(builder, inframeBottomYOffset);
    TRPOKECFG.addInframeVerticalRotYOrigin(builder, inframeVerticalRotYOrigin);
    TRPOKECFG.addUnk3(builder, unk3);
    TRPOKECFG.addUnk2(builder, unk2);
    TRPOKECFG.addUnk1(builder, unk1);
    TRPOKECFG.addSizeIndex(builder, sizeIndex);
    return TRPOKECFG.endTRPOKECFG(builder);
  }

  public static void startTRPOKECFG(FlatBufferBuilder builder) { builder.startTable(13); }
  public static void addSizeIndex(FlatBufferBuilder builder, byte sizeIndex) { builder.addByte(0, sizeIndex, 0); }
  public static void addUnk1(FlatBufferBuilder builder, float unk1) { builder.addFloat(1, unk1, 0.0f); }
  public static void addUnk2(FlatBufferBuilder builder, float unk2) { builder.addFloat(2, unk2, 0.0f); }
  public static void addUnk3(FlatBufferBuilder builder, float unk3) { builder.addFloat(3, unk3, 0.0f); }
  public static void addInframeVerticalRotYOrigin(FlatBufferBuilder builder, float inframeVerticalRotYOrigin) { builder.addFloat(4, inframeVerticalRotYOrigin, 0.0f); }
  public static void addInframeBottomYOffset(FlatBufferBuilder builder, float inframeBottomYOffset) { builder.addFloat(5, inframeBottomYOffset, 0.0f); }
  public static void addInframeCenterYOffset(FlatBufferBuilder builder, float inframeCenterYOffset) { builder.addFloat(6, inframeCenterYOffset, 0.0f); }
  public static void addInframeLeftRotation(FlatBufferBuilder builder, float inframeLeftRotation) { builder.addFloat(7, inframeLeftRotation, 0.0f); }
  public static void addInframeRightRotation(FlatBufferBuilder builder, float inframeRightRotation) { builder.addFloat(8, inframeRightRotation, 0.0f); }
  public static void addUnk9(FlatBufferBuilder builder, float unk9) { builder.addFloat(9, unk9, 0.0f); }
  public static void addUnk10YOffset(FlatBufferBuilder builder, float unk10YOffset) { builder.addFloat(10, unk10YOffset, 0.0f); }
  public static void addUnk11YOffset(FlatBufferBuilder builder, float unk11YOffset) { builder.addFloat(11, unk11YOffset, 0.0f); }
  public static void addUnk12YOffset(FlatBufferBuilder builder, float unk12YOffset) { builder.addFloat(12, unk12YOffset, 0.0f); }
  public static int endTRPOKECFG(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRPOKECFGBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRPOKECFGBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRPOKECFG get(int j) { return get(new TRPOKECFG(), j); }
    public TRPOKECFG get(TRPOKECFG obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

